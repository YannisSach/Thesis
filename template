
        \Let{$s := last(E)$}
        \For{all process $p$}{
            \For{all process $q$ \neq $p$}{
            \If{$\exists i = max(\{ i \in dom(E) \mid E_i$ is dependent and may be co-enabled with $next(s,p)$ and $ E_i.tid = q \} $}{
                \uIf{$p \in enabled(pre(E,i)))$}{
                    add $p$ to $backtrack(pre(E,i))$ \;
                }
                \Else{add $enabled(pre(E,i))$ to $backtrack(pre(E,i))$ \;}
                \uIF{$j = max(\{ j \in dom(E) \mid j = 0 $ or $ S_{j-1}.tid \neq S_j.tid $ and $ j<i \})$}{
                    \uIf{$p \in enabled(pre(E,i)))$}{
                        add $p$ to $backtrack(pre(E,i))$ \;
                    }
                    \Else{add $enabled(pre(E,i))$ to $backtrack(pre(E,i))$ \;}
                }
            }
            }
        }
        \If{$p \in enabled(s)$}{
            add $p$ to $backtrack(s)$ \;
        }
        \Else{
            add any $u \in enabled(s)$ to $backtrack(s)$ \;
        }
        \Let{$visited = \emptyset $}
        \While{$ \exist u \in (enabled(s) \cap backtrack(s) \backslash visited) $}{
            add $u$ to $visited$ \;
            \uIF{$(Bv(S.next(s, u)) \leq c)$}{
                Explore($S.next(s, u)$) \;
            }
        }